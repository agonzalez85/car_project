#include <ECE3.h>

uint16_t sensorValues[8];

//Calibration Variables
int minimums[8] = {643, 573, 572, 458, 526, 503, 597, 573};
int maximums[8] = {1857, 1916, 1928, 705, 1276, 1275, 1845, 1927};
int weights[8] = {15, 14, 12, 8, -8, -12, -14, -15};
int error_value=0;
float kp = 0.025; 
float kd = 0.08; 
float current = 0;
float past = 0;
float difference = 0;

//car variables
const int left_nslp_pin=31;
const int right_nslp_pin=11;
const int left_dir_pin=29;
const int right_dir_pin=30;
const int left_pwm_pin=40;
const int right_pwm_pin=39;

const int LED_RF = 41;
int wheel_speed = 80; 
const int TURN_SPEED = 100; // ADJUST 
const int TURN_270_COUNT = 535; // ADJUST
const int TURN_HALF_COUNT = 200; //ADJUST
const int TURN_180_COUNT = 340; //350

// Track position variables
int track_position = 0;
const int LOOP_1_FORWARD = 510; 
const int HALF_LOOP_FORWARD = 1615; 
const int LOOP_2_FORWARD = 3620; 
const int END_POINT_1 = 6400; //ADJUST
const int LOOP_2_BACKWARD = 9260; //ADJUST
const int HALF_LOOP_BACKWARD = 11220; //ADJUST
const int LOOP_1_BACKWARD = 12010; //ADJUST
const int FINAL_END = 13210; //ADJUST

bool is_forward = true;

//averge pulse count
int average()
{
  int get_l = getEncoderCount_left();
  int get_r = getEncoderCount_right();
  return ((get_l+get_r)/2);
}

void stop_car() 
{
  analogWrite(left_pwm_pin, 0);
  analogWrite(right_pwm_pin, 0);
  delay(20);
}

void turn_270_forward() 
{
  int initial_count = average();
  int target_count = initial_count + TURN_270_COUNT;
  
  digitalWrite(left_dir_pin, LOW);   // Left wheel backward
  digitalWrite(right_dir_pin, HIGH);   // Right wheel forward
  
  while (average() < target_count) 
  {
    analogWrite(left_pwm_pin, TURN_SPEED);
    analogWrite(right_pwm_pin, TURN_SPEED*0.3);
  }
  
  stop_car();
  
  // Reset direction pins
  digitalWrite(left_dir_pin, LOW);
  digitalWrite(right_dir_pin, LOW);
}

void turn_half_forward() 
{
  int initial_count = average();
  int target_count = initial_count + TURN_HALF_COUNT; // Adjust this as needed
  
  digitalWrite(left_dir_pin, HIGH);    // Left wheel backward
  digitalWrite(right_dir_pin, LOW);  // Right wheel forward
  
  while (average() < target_count) 
  {
    analogWrite(left_pwm_pin, TURN_SPEED*0.4);        // Left wheel at full turn speed
    analogWrite(right_pwm_pin, TURN_SPEED ); // Right wheel slightly slower
  }
  
  stop_car();
  
  // Reset direction pins
  digitalWrite(left_dir_pin, LOW);
  digitalWrite(right_dir_pin, LOW);
  delay(20);
}

void turn_180_forward() 
{
  int initial_count = average();
  int target_count = initial_count + TURN_180_COUNT-120;
  
  digitalWrite(left_dir_pin, LOW);   // Left wheel forward
  digitalWrite(right_dir_pin, HIGH);   // Right wheel backward
  
  while (average() < target_count) 
  {
    analogWrite(left_pwm_pin, TURN_SPEED);
    analogWrite(right_pwm_pin, TURN_SPEED*0.6);  // Reduce right wheel speed for right turn

  }
  
  stop_car();

  // Reset direction pins
  digitalWrite(left_dir_pin, LOW);
  digitalWrite(right_dir_pin, LOW);
}

void turn_180() 
{
  int initial_count = average();
  int target_count = initial_count + TURN_180_COUNT-10;
  
  digitalWrite(left_dir_pin, HIGH);   // Left wheel forward
  digitalWrite(right_dir_pin, LOW);   // Right wheel backward
  
  while (average() < target_count) 
  {
    analogWrite(left_pwm_pin, TURN_SPEED);
    analogWrite(right_pwm_pin, TURN_SPEED);
  }
  
  stop_car();
  digitalWrite(left_dir_pin, LOW);
  digitalWrite(right_dir_pin, LOW);
}

void turn_180_backward() 
{
  int initial_count = average();
  int target_count = initial_count + TURN_180_COUNT-55;
  
  digitalWrite(left_dir_pin, HIGH);    // Left wheel backward
  digitalWrite(right_dir_pin, LOW);  // Right wheel forward
  
  while (average() < target_count) 
  {
    analogWrite(left_pwm_pin, TURN_SPEED*0.6);
    analogWrite(right_pwm_pin, TURN_SPEED);
  }
  
  stop_car();
  digitalWrite(left_dir_pin, LOW);
  digitalWrite(right_dir_pin, LOW);
}

void turn_270_backward() 
{
  int initial_count = average();
  int target_count = initial_count + TURN_270_COUNT;
  
  digitalWrite(left_dir_pin, HIGH);   // Left wheel forward
  digitalWrite(right_dir_pin, LOW);  // Right wheel forward
  
  while (average() < target_count) 
  {
    analogWrite(left_pwm_pin, TURN_SPEED * 0.3);  // Reduce left wheel speed for left turn
    analogWrite(right_pwm_pin, TURN_SPEED);
  }
  
  stop_car();

  // Reset direction pins
  digitalWrite(left_dir_pin, LOW);
  digitalWrite(right_dir_pin, LOW);
}

void turn_half_backward() 
{
    int initial_count = average();
    int target_count = initial_count + TURN_HALF_COUNT-28; // Sharp turn for half loop
    
    digitalWrite(left_dir_pin, LOW);   // Left wheel backward
    digitalWrite(right_dir_pin, HIGH);   // Right wheel forward
    
    while (average() < target_count) 
    {
        analogWrite(left_pwm_pin, TURN_SPEED);   // Left wheel turn
        analogWrite(right_pwm_pin, TURN_SPEED*0.4);         // Right wheel slower for sharper turn
    }
    
    stop_car();

    digitalWrite(left_dir_pin, LOW);
    digitalWrite(right_dir_pin, LOW);
}

void setup() 
{
  ECE3_Init();
  Serial.begin(9600); // set the data rate in bits per second for serial data transmission

  pinMode(left_nslp_pin, OUTPUT);
  pinMode(left_dir_pin,OUTPUT);
  pinMode(left_pwm_pin,OUTPUT);
  pinMode(right_nslp_pin,OUTPUT);
  pinMode(right_dir_pin,OUTPUT);
  pinMode(right_pwm_pin,OUTPUT);

  pinMode(LED_RF,OUTPUT);
  digitalWrite(left_nslp_pin,HIGH);
  digitalWrite(right_nslp_pin,HIGH);

  resetEncoderCount_left();
  resetEncoderCount_right();
 
 // delay(2000); //wait 2 seconds before starting
}

void loop() 
{ 
  track_position = average(); //update track position

 if (is_forward) //car going through the track the first time
  {
    if (track_position >= LOOP_1_FORWARD && track_position < LOOP_1_FORWARD + 20) //loop 1
    {
      turn_270_forward();
    } 
    else if (track_position >= HALF_LOOP_FORWARD && track_position < HALF_LOOP_FORWARD + 20) 
    {
      turn_half_forward();
    }
    else if (track_position >= LOOP_2_FORWARD && track_position < LOOP_2_FORWARD + 20) //loop 2
    {
      turn_180_forward();
    } 
    else if (track_position >= END_POINT_1 && track_position < END_POINT_1 + 20) //end point 1
    {
      turn_180();
      is_forward = false;
    }
  } 
  else //car going through the track the second time
  {
    if (track_position >= LOOP_2_BACKWARD && track_position < LOOP_2_BACKWARD + 20) //loop 2
    {
      turn_180_backward();
    } 
    else if (track_position >= HALF_LOOP_BACKWARD && track_position < HALF_LOOP_BACKWARD + 20) //loop 1
    {
      turn_half_backward();
    } 
    else if (track_position >= LOOP_1_BACKWARD && track_position < LOOP_1_BACKWARD + 20) //loop 1
    {
      turn_270_backward();
    } 
    else if (track_position >= FINAL_END) //end
    {
      stop_car();
      while(1); // Stop the program
    }
  }

  int summed_values[8] = {0};
  error_value=0;

  // Read raw sensor values
  ECE3_read_IR(sensorValues);

  // Add the current sensor values using a for loop
  for (unsigned char i = 0; i < 8; i++)
  {
    summed_values[i] = sensorValues[i];
    summed_values[i] -= minimums[i];
    summed_values[i]= 1000*summed_values[i]/maximums[i];
    summed_values[i] *= weights[i];
    error_value += summed_values[i];
   }

   error_value=error_value*kp-200;
   current = error_value;
   difference = current - past;

  if (error_value < 0) //off track on the right
  {
//    if (abs(((error_value)+(kd*difference))) > wheel_speed)
//    {
//      analogWrite(left_pwm_pin, 0);
//
//    }
//    else
//    {
//      analogWrite(left_pwm_pin,wheel_speed+((error_value)+(kd*difference)));
//    }
//    analogWrite(right_pwm_pin,wheel_speed);
    //Serial.println((error_value)+(kd*difference));

    int left_speed = wheel_speed+((error_value)+(kd*difference));
    left_speed = max(0, min(left_speed, wheel_speed));
    analogWrite(left_pwm_pin, left_speed);
    analogWrite(right_pwm_pin,wheel_speed);
  }
  else if (error_value > 0) //off track on the left
  {
//    analogWrite(left_pwm_pin,wheel_speed);
//    if (((error_value)-(kd*difference)) > wheel_speed)
//    {
//      analogWrite(right_pwm_pin,0);
//    }
//    else
//    {
//      analogWrite(right_pwm_pin,wheel_speed-((error_value)-(kd*difference)));
//    }
    //Serial.println((error_value)+(kd*difference));
    int right_speed = wheel_speed-((error_value)-(kd*difference));
    right_speed = max(0, min(right_speed, wheel_speed));
    analogWrite(left_pwm_pin,wheel_speed);
    analogWrite(right_pwm_pin, right_speed);
  }
  
  past = current;
}
